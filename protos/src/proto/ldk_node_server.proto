syntax = "proto3";
package ldk_node_server;

// Retrieve the latest node info like `node_id`, `current_best_block` etc.
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.node_id
// - https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.status
message GetNodeInfoRequest {
}

message GetNodeInfoResponse {

  // The hex-encoded `node-id` or public key for our own lightning node.
  string node_id = 1;

  // The best block to which our Lightning wallet is currently synced.
  //
  // Should be always set, will never be `None`.
  BestBlock current_best_block = 3;

  // The timestamp, in seconds since start of the UNIX epoch, when we last successfully synced our Lightning wallet to
  // the chain tip.
  //
  // Will be `None` if the wallet hasn't been synced yet.
  optional uint64 latest_lightning_wallet_sync_timestamp = 4;

  // The timestamp, in seconds since start of the UNIX epoch, when we last successfully synced our on-chain
  // wallet to the chain tip.
  //
  // Will be `None` if the wallet hasn’t been synced since the node was initialized.
  optional uint64 latest_onchain_wallet_sync_timestamp = 5;

  // The timestamp, in seconds since start of the UNIX epoch, when we last successfully update our fee rate cache.
  //
  // Will be `None` if the cache hasn’t been updated since the node was initialized.
  optional uint64 latest_fee_rate_cache_update_timestamp = 6;

  // The timestamp, in seconds since start of the UNIX epoch, when the last rapid gossip sync (RGS) snapshot we
  // successfully applied was generated.
  //
  // Will be `None` if RGS isn’t configured or the snapshot hasn’t been updated since the node was initialized.
  optional uint64 latest_rgs_snapshot_timestamp = 7;

  // The timestamp, in seconds since start of the UNIX epoch, when we last broadcasted a node announcement.
  //
  // Will be `None` if we have no public channels or we haven’t broadcasted since the node was initialized.
  optional uint64  latest_node_announcement_broadcast_timestamp = 8;
}

// Retrieve a new on-chain funding address.
// See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.OnchainPayment.html#method.new_address
message OnchainReceiveRequest {
}

message OnchainReceiveResponse {

  // A Bitcoin on-chain address.
  string address = 1;
}

// Send an on-chain payment to the given address.
message OnchainSendRequest {

  // The address to send coins to.
  string address = 1;

  // The amount in satoshis to send.
  // While sending the specified amount, we will respect any on-chain reserve we need to keep,
  // i.e., won't allow to cut into `total_anchor_channels_reserve_sats`.
  // See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.OnchainPayment.html#method.send_to_address
  optional uint64 amount_sats = 2;

  // If set, the amount_sats field should be unset.
  // It indicates that node will send full balance to the specified address.
  //
  // Please note that when send_all is used this operation will **not** retain any on-chain reserves,
  // which might be potentially dangerous if you have open Anchor channels for which you can't trust
  // the counterparty to spend the Anchor output after channel closure.
  // See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.OnchainPayment.html#method.send_all_to_address
  optional bool send_all = 3;
}

message OnchainSendResponse {

  // The transaction ID of the broadcasted transaction.
  string txid = 1;
}

// Return a BOLT11 payable invoice that can be used to request and receive a payment
// for the given amount, if specified.
// The inbound payment will be automatically claimed upon arrival.
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt11Payment.html#method.receive
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt11Payment.html#method.receive_variable_amount
message Bolt11ReceiveRequest {

  // The amount in millisatoshi to send. If unset, a "zero-amount" or variable-amount invoice is returned.
  optional uint64 amount_msat = 1;

  // An optional description to attach along with the invoice.
  // Will be set in the description field of the encoded payment request.
  string description = 2;

  // Invoice expiry time in seconds.
  uint32 expiry_secs = 3;
}


message Bolt11ReceiveResponse {

  // An invoice for a payment within the Lightning Network.
  // With the details of the invoice, the sender has all the data necessary to send a payment
  // to the recipient.
  string invoice = 1;
}

// Send a payment for a BOLT11 invoice.
// See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt11Payment.html#method.send
message Bolt11SendRequest {

  // An invoice for a payment within the Lightning Network.
  string invoice = 1;

  // Set this field when paying a so-called "zero-amount" invoice, i.e., an invoice that leaves the
  // amount paid to be determined by the user.
  // This operation will fail if the amount specified is less than the value required by the given invoice.
  optional uint64 amount_msat = 2;

}

message Bolt11SendResponse {

  // An identifier used to uniquely identify a payment.
  bytes payment_id = 1;
}

// Returns a BOLT12 offer for the given amount, if specified.
//
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.receive
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.receive_variable_amount
message Bolt12ReceiveRequest {

  // An optional description to attach along with the offer.
  // Will be set in the description field of the encoded offer.
  string description = 1;

  // The amount in millisatoshi to send. If unset, a "zero-amount" or variable-amount offer is returned.
  optional uint64 amount_msat = 2;

  // Offer expiry time in seconds.
  optional uint32 expiry_secs = 3;

  // If set, it represents the number of items requested, can only be set for fixed-amount offers.
  optional uint64 quantity = 4;
}

message Bolt12ReceiveResponse {

  // An offer for a payment within the Lightning Network.
  // With the details of the offer, the sender has all the data necessary to send a payment
  // to the recipient.
  string offer = 1;
}

// Send a payment for a BOLT12 offer.
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.send
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.send_using_amount
message Bolt12SendRequest {

  // An offer for a payment within the Lightning Network.
  string offer = 1;

  // Set this field when paying a so-called "zero-amount" offer, i.e., an offer that leaves the
  // amount paid to be determined by the user.
  // This operation will fail if the amount specified is less than the value required by the given offer.
  optional uint64 amount_msat = 2;

  // If set, it represents the number of items requested.
  optional uint64 quantity = 3;

  // If set, it will be seen by the recipient and reflected back in the invoice.
  optional string payer_note = 4;
}

message Bolt12SendResponse {

  // An identifier used to uniquely identify a payment.
  bytes payment_id = 1;
}

// Creates a new outbound channel to the given remote node.
// See more: https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.connect_open_channel
message OpenChannelRequest {

  // The hex-encoded public key of the node to open a channel with.
  string node_pubkey = 1;

  // An address which can be used to connect to a remote peer.
  // It can be of type IPv4:port, IPv6:port, OnionV3:port or hostname:port
  string address = 2;

  // The amount of satoshis the caller is willing to commit to the channel.
  uint64 channel_amount_sats = 3;

  // The amount of satoshis to push to the remote side as part of the initial commitment state.
  optional uint64 push_to_counterparty_msat = 4;

  // The channel configuration to be used for opening this channel. If unset, default ChannelConfig is used.
  optional ChannelConfig channel_config = 5;

  // Whether the channel should be public.
  bool announce_channel = 6;
}

message OpenChannelResponse {

  // The channel id of the created channel that user can use to refer to channel.
  bytes user_channel_id = 1;
}

// Update the config for a previously opened channel.
// See more: https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.update_channel_config
message UpdateChannelConfigRequest {

  // The hex-encoded local `user_channel_id` of this channel.
  string user_channel_id = 1;

  // The hex-encoded public key of the counterparty node to update channel config with.
  string counterparty_node_id = 2;

  // The updated channel configuration settings for a channel.
  ChannelConfig channel_config = 3;
}

message UpdateChannelConfigResponse {
}

// ChannelConfig represents the configuration settings for a channel in a Lightning Network node.
// See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html
message ChannelConfig {
  // Amount (in millionths of a satoshi) charged per satoshi for payments forwarded outbound
  // over the channel.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.forwarding_fee_proportional_millionths
  optional uint32 forwarding_fee_proportional_millionths = 1;

  // Amount (in milli-satoshi) charged for payments forwarded outbound over the channel,
  // in excess of forwarding_fee_proportional_millionths.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.forwarding_fee_base_msat
  optional uint32 forwarding_fee_base_msat = 2;

  // The difference in the CLTV value between incoming HTLCs and an outbound HTLC forwarded
  // over the channel this config applies to.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.cltv_expiry_delta
  optional uint32 cltv_expiry_delta = 3;

  // The maximum additional fee we’re willing to pay to avoid waiting for the counterparty’s
  // to_self_delay to reclaim funds.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.force_close_avoidance_max_fee_satoshis
  optional uint64 force_close_avoidance_max_fee_satoshis = 4;

  // If set, allows this channel’s counterparty to skim an additional fee off this node’s
  // inbound HTLCs. Useful for liquidity providers to offload on-chain channel costs to end users.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.accept_underpaying_htlcs
  optional bool accept_underpaying_htlcs = 5;

  // Limit our total exposure to potential loss to on-chain fees on close, including
  // in-flight HTLCs which are burned to fees as they are too small to claim on-chain
  // and fees on commitment transaction(s) broadcasted by our counterparty in excess of
  // our own fee estimate.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.max_dust_htlc_exposure
  oneof max_dust_htlc_exposure {

    // This sets a fixed limit on the total dust exposure in millisatoshis.
    // See more: https://docs.rs/lightning/latest/lightning/util/config/enum.MaxDustHTLCExposure.html#variant.FixedLimitMsat
    uint64 fixed_limit_msat = 6;

    // This sets a multiplier on the ConfirmationTarget::OnChainSweep feerate (in sats/KW) to determine the maximum allowed dust exposure.
    // See more: https://docs.rs/lightning/latest/lightning/util/config/enum.MaxDustHTLCExposure.html#variant.FeeRateMultiplier
    uint64 fee_rate_multiplier = 7;
  }
}

// Closes the channel specified by given request.
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.close_channel
// - https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.force_close_channel
message CloseChannelRequest {

  // The channel id of the created channel that user can use to refer to channel.
  bytes user_channel_id = 1;

  // The hex-encoded public key of the node to close a channel with.
  string counterparty_node_id = 2;

  // Whether to force close the specified channel.
  optional bool force_close = 3;

  // The reason for force-closing, can only be set while force closing a channel.
  optional string force_close_reason = 4;
}

message CloseChannelResponse {

}

// Returns a list of known channels.
// See more: https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.list_channels
message ListChannelsRequest {}

message ListChannelsResponse {

  // List of channels.
  repeated Channel channels = 1;
}

// Returns payment details for a given payment_id.
// See more: https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.payment
message GetPaymentDetailsRequest {
  // An identifier used to uniquely identify a payment in hex-encoded form.
  string payment_id = 1;
}

message GetPaymentDetailsResponse {
  // Represents a payment.
  // Will be `None` if payment doesn't exist.
  Payment payment = 1;
}

// Retrieves list of all payments.
// See more: https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.list_payments
message ListPaymentsRequest {}

message ListPaymentsResponse {
  // List of payments.
  repeated Payment payments = 1;
}

// Represents a payment.
// See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.PaymentDetails.html
message Payment {
  // An identifier used to uniquely identify a payment in hex-encoded form.
  string id = 1;

  // The kind of the payment.
  PaymentKind kind = 2;

  // The amount transferred.
  optional uint64 amount_msat = 3;

  // The direction of the payment.
  PaymentDirection direction = 4;

  // The status of the payment.
  PaymentStatus status = 5;

  // The timestamp, in seconds since start of the UNIX epoch, when this entry was last updated.
  uint64 latest_update_timestamp = 6;
}

message PaymentKind {
  oneof kind {
    Onchain onchain = 1;
    Bolt11 bolt11 = 2;
    Bolt11Jit bolt11_jit = 3;
    Bolt12Offer bolt12_offer = 4;
    Bolt12Refund bolt12_refund = 5;
    Spontaneous spontaneous = 6;
  }
}

// Represents an on-chain payment.
message Onchain {}

// Represents a BOLT 11 payment.
message Bolt11 {
  // The payment hash, i.e., the hash of the preimage.
  string hash = 1;

  // The pre-image used by the payment.
  optional string preimage = 2;

  // The secret used by the payment.
  optional bytes secret = 3;
}

// Represents a BOLT 11 payment intended to open an LSPS 2 just-in-time channel.
message Bolt11Jit {
  // The payment hash, i.e., the hash of the preimage.
  string hash = 1;

  // The pre-image used by the payment.
  optional string preimage = 2;

  // The secret used by the payment.
  optional bytes secret = 3;

  // Limits applying to how much fee we allow an LSP to deduct from the payment amount.
  //
  // Allowing them to deduct this fee from the first inbound payment will pay for the LSP’s channel opening fees.
  //
  // See [`LdkChannelConfig::accept_underpaying_htlcs`](https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.accept_underpaying_htlcs)
  // for more information.
  LSPFeeLimits lsp_fee_limits = 4;
}

// Represents a BOLT 12 ‘offer’ payment, i.e., a payment for an Offer.
message Bolt12Offer {
  // The payment hash, i.e., the hash of the preimage.
  optional string hash = 1;

  // The pre-image used by the payment.
  optional string preimage = 2;

  // The secret used by the payment.
  optional bytes secret = 3;

  // The hex-encoded ID of the offer this payment is for.
  string offer_id = 4;

  // The payer's note for the payment.
  // Truncated to [PAYER_NOTE_LIMIT](https://docs.rs/lightning/latest/lightning/offers/invoice_request/constant.PAYER_NOTE_LIMIT.html).
  //
  // **Caution**: The `payer_note` field may come from an untrusted source. To prevent potential misuse,
  // all non-printable characters will be sanitized and replaced with safe characters.
  optional string payer_note = 5;

  // The quantity of an item requested in the offer.
  optional uint64 quantity = 6;
}

// Represents a BOLT 12 ‘refund’ payment, i.e., a payment for a Refund.
message Bolt12Refund {
  // The payment hash, i.e., the hash of the preimage.
  optional string hash = 1;

  // The pre-image used by the payment.
  optional string preimage = 2;

  // The secret used by the payment.
  optional bytes secret = 3;

  // The payer's note for the payment.
  // Truncated to [PAYER_NOTE_LIMIT](https://docs.rs/lightning/latest/lightning/offers/invoice_request/constant.PAYER_NOTE_LIMIT.html).
  //
  // **Caution**: The `payer_note` field may come from an untrusted source. To prevent potential misuse,
  // all non-printable characters will be sanitized and replaced with safe characters.
  optional string payer_note = 5;

  // The quantity of an item requested in the offer.
  optional uint64 quantity = 6;

}

// Represents a spontaneous (“keysend”) payment.
message Spontaneous {
  // The payment hash, i.e., the hash of the preimage.
  string hash = 1;

  // The pre-image used by the payment.
  optional string preimage = 2;
}

// Limits applying to how much fee we allow an LSP to deduct from the payment amount.
// See [`LdkChannelConfig::accept_underpaying_htlcs`] for more information.
//
// [`LdkChannelConfig::accept_underpaying_htlcs`]: lightning::util::config::ChannelConfig::accept_underpaying_htlcs
message LSPFeeLimits {
  // The maximal total amount we allow any configured LSP withhold from us when forwarding the
  // payment.
  optional uint64 max_total_opening_fee_msat = 1;

  // The maximal proportional fee, in parts-per-million millisatoshi, we allow any configured
  // LSP withhold from us when forwarding the payment.
  optional uint64 max_proportional_opening_fee_ppm_msat = 2;
}

// Represents the direction of a payment.
enum PaymentDirection {
  // The payment is inbound.
  INBOUND = 0;

  // The payment is outbound.
  OUTBOUND = 1;
}

// Represents the current status of a payment.
enum PaymentStatus {
  // The payment is still pending.
  PENDING = 0;

  // The payment succeeded.
  SUCCEEDED = 1;

  // The payment failed.
  FAILED = 2;
}

message Channel {
  // The channel ID (prior to funding transaction generation, this is a random 32-byte
  // identifier, afterwards this is the transaction ID of the funding transaction XOR the
  // funding transaction output).
  //
  // Note that this means this value is *not* persistent - it can change once during the
  // lifetime of the channel.
  string channel_id = 1;

  // The node ID of our the channel's remote counterparty.
  string counterparty_node_id = 2;

  // The channel's funding transaction output, if we've negotiated the funding transaction with
  // our counterparty already.
  optional OutPoint funding_txo = 3;

  // The hex-encoded local `user_channel_id` of this channel.
  string user_channel_id = 4;

  // The value, in satoshis, that must always be held as a reserve in the channel for us. This
  // value ensures that if we broadcast a revoked state, our counterparty can punish us by
  // claiming at least this value on chain.
  //
  // This value is not included in [`outbound_capacity_msat`] as it can never be spent.
  //
  // This value will be `None` for outbound channels until the counterparty accepts the channel.
  optional uint64 unspendable_punishment_reserve = 5;

  // The value, in satoshis, of this channel as it appears in the funding output.
  uint64 channel_value_sats = 6;

  // The currently negotiated fee rate denominated in satoshi per 1000 weight units,
  // which is applied to commitment and HTLC transactions.
  uint32 feerate_sat_per_1000_weight = 7;

  // The available outbound capacity for sending HTLCs to the remote peer.
  //
  // The amount does not include any pending HTLCs which are not yet resolved (and, thus, whose
  // balance is not available for inclusion in new outbound HTLCs). This further does not include
  // any pending outgoing HTLCs which are awaiting some other resolution to be sent.
  uint64 outbound_capacity_msat = 8;

  // The available outbound capacity for sending HTLCs to the remote peer.
  //
  // The amount does not include any pending HTLCs which are not yet resolved
  // (and, thus, whose balance is not available for inclusion in new inbound HTLCs). This further
  // does not include any pending outgoing HTLCs which are awaiting some other resolution to be
  // sent.
  uint64 inbound_capacity_msat = 9;

  // The number of required confirmations on the funding transactions before the funding is
  // considered "locked". The amount is selected by the channel fundee.
  //
  // The value will be `None` for outbound channels until the counterparty accepts the channel.
  optional uint32 confirmations_required = 10;

  // The current number of confirmations on the funding transaction.
  optional uint32 confirmations = 11;

  // Is `true` if the channel was initiated (and therefore funded) by us.
  bool is_outbound = 12;

  // Is `true` if both parties have exchanged `channel_ready` messages, and the channel is
  // not currently being shut down. Both parties exchange `channel_ready` messages upon
  // independently verifying that the required confirmations count provided by
  // `confirmations_required` has been reached.
  bool is_channel_ready = 13;

  // Is `true` if the channel (a) `channel_ready` messages have been exchanged, (b) the
  // peer is connected, and (c) the channel is not currently negotiating shutdown.
  //
  // This is a strict superset of `is_channel_ready`.
  bool is_usable = 14;

  // Is `true` if this channel is (or will be) publicly-announced
  bool is_announced = 15;

  // Set of configurable parameters set by self that affect channel operation.
  ChannelConfig channel_config = 16;

  // The available outbound capacity for sending a single HTLC to the remote peer. This is
  // similar to `outbound_capacity_msat` but it may be further restricted by
  // the current state and per-HTLC limit(s). This is intended for use when routing, allowing us
  // to use a limit as close as possible to the HTLC limit we can currently send.
  uint64 next_outbound_htlc_limit_msat = 17;

  // The minimum value for sending a single HTLC to the remote peer. This is the equivalent of
  // `next_outbound_htlc_limit_msat` but represents a lower-bound, rather than
  // an upper-bound. This is intended for use when routing, allowing us to ensure we pick a
  // route which is valid.
  uint64 next_outbound_htlc_minimum_msat = 18;

  // The number of blocks (after our commitment transaction confirms) that we will need to wait
  // until we can claim our funds after we force-close the channel. During this time our
  // counterparty is allowed to punish us if we broadcasted a stale state. If our counterparty
  // force-closes the channel and broadcasts a commitment transaction we do not have to wait any
  // time to claim our non-HTLC-encumbered funds.
  //
  // This value will be `None` for outbound channels until the counterparty accepts the channel.
  optional uint32 force_close_spend_delay = 19;

  // The smallest value HTLC (in msat) the remote peer will accept, for this channel.
  //
  // This field is only `None` before we have received either the `OpenChannel` or
  // `AcceptChannel` message from the remote peer.
  optional uint64 counterparty_outbound_htlc_minimum_msat = 20;

  // The largest value HTLC (in msat) the remote peer currently will accept, for this channel.
  optional uint64 counterparty_outbound_htlc_maximum_msat = 21;

  // The value, in satoshis, that must always be held in the channel for our counterparty. This
  // value ensures that if our counterparty broadcasts a revoked state, we can punish them by
  // claiming at least this value on chain.
  //
  // This value is not included in `inbound_capacity_msat` as it can never be spent.
  uint64 counterparty_unspendable_punishment_reserve = 22;

  // Base routing fee in millisatoshis.
  optional uint32 counterparty_forwarding_info_fee_base_msat = 23;

  // Proportional fee, in millionths of a satoshi the channel will charge per transferred satoshi.
  optional uint32 counterparty_forwarding_info_fee_proportional_millionths = 24;

  // The minimum difference in CLTV expiry between an ingoing HTLC and its outgoing counterpart,
  // such that the outgoing HTLC is forwardable to this counterparty.
  optional uint32 counterparty_forwarding_info_cltv_expiry_delta = 25;
}

// Represent a transaction outpoint.
message OutPoint {
  // The referenced transaction's txid.
  string txid = 1;

  // The index of the referenced output in its transaction's vout.
  uint32 vout = 2;
}

message BestBlock {
  // The block’s hash
  string block_hash = 1;

  // The height at which the block was confirmed.
  uint32 height = 2;
}
