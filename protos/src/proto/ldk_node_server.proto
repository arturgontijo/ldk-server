syntax = "proto3";
package ldk_node_server;

// Retrieve a new on-chain funding address.
// See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.OnchainPayment.html#method.new_address
message OnchainReceiveRequest {
}

message OnchainReceiveResponse {

  // A Bitcoin on-chain address.
  string address = 1;
}

// Send an on-chain payment to the given address.
message OnchainSendRequest {

  // The address to send coins to.
  string address = 1;

  // The amount in satoshis to send.
  // While sending the specified amount, we will respect any on-chain reserve we need to keep,
  // i.e., won't allow to cut into `total_anchor_channels_reserve_sats`.
  // See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.OnchainPayment.html#method.send_to_address
  optional uint64 amount_sats = 2;

  // If set, the amount_sats field should be unset.
  // It indicates that node will send full balance to the specified address.
  //
  // Please note that when send_all is used this operation will **not** retain any on-chain reserves,
  // which might be potentially dangerous if you have open Anchor channels for which you can't trust
  // the counterparty to spend the Anchor output after channel closure.
  // See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.OnchainPayment.html#method.send_all_to_address
  optional bool send_all = 3;
}

message OnchainSendResponse {

  // The transaction ID of the broadcasted transaction.
  string txid = 1;
}

// Return a BOLT11 payable invoice that can be used to request and receive a payment
// for the given amount, if specified.
// The inbound payment will be automatically claimed upon arrival.
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt11Payment.html#method.receive
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt11Payment.html#method.receive_variable_amount
message Bolt11ReceiveRequest {

  // The amount in millisatoshi to send. If unset, a "zero-amount" or variable-amount invoice is returned.
  optional uint64 amount_msat = 1;

  // An optional description to attach along with the invoice.
  // Will be set in the description field of the encoded payment request.
  string description = 2;

  // Invoice expiry time in seconds.
  uint32 expiry_secs = 3;
}


message Bolt11ReceiveResponse {

  // An invoice for a payment within the Lightning Network.
  // With the details of the invoice, the sender has all the data necessary to send a payment
  // to the recipient.
  string invoice = 1;
}

// Send a payment for a BOLT11 invoice.
// See more: https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt11Payment.html#method.send
message Bolt11SendRequest {

  // An invoice for a payment within the Lightning Network.
  string invoice = 1;

  // Set this field when paying a so-called "zero-amount" invoice, i.e., an invoice that leaves the
  // amount paid to be determined by the user.
  // This operation will fail if the amount specified is less than the value required by the given invoice.
  optional uint64 amount_msat = 2;

}

message Bolt11SendResponse {

  // An identifier used to uniquely identify a payment.
  PaymentId payment_id = 1;
}

// An identifier used to uniquely identify a payment.
message PaymentId {

  bytes data = 1;
}

// Returns a BOLT12 offer for the given amount, if specified.
//
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.receive
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.receive_variable_amount
message Bolt12ReceiveRequest {

  // An optional description to attach along with the offer.
  // Will be set in the description field of the encoded offer.
  string description = 1;

  // The amount in millisatoshi to send. If unset, a "zero-amount" or variable-amount offer is returned.
  optional uint64 amount_msat = 2;
}

message Bolt12ReceiveResponse {

  // An offer for a payment within the Lightning Network.
  // With the details of the offer, the sender has all the data necessary to send a payment
  // to the recipient.
  string offer = 1;
}

// Send a payment for a BOLT12 offer.
// See more:
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.send
// - https://docs.rs/ldk-node/latest/ldk_node/payment/struct.Bolt12Payment.html#method.send_using_amount
message Bolt12SendRequest {

  // An offer for a payment within the Lightning Network.
  string offer = 1;

  // Set this field when paying a so-called "zero-amount" offer, i.e., an offer that leaves the
  // amount paid to be determined by the user.
  // This operation will fail if the amount specified is less than the value required by the given offer.
  optional uint64 amount_msat = 2;

  // If set, it represents the number of items requested.
  optional uint64 quantity = 3;

  // If set, it will be seen by the recipient and reflected back in the invoice.
  optional string payer_note = 4;
}

message Bolt12SendResponse {

  // An identifier used to uniquely identify a payment.
  PaymentId payment_id = 1;
}

// Creates a new outbound channel to the given remote node.
// See more: https://docs.rs/ldk-node/latest/ldk_node/struct.Node.html#method.connect_open_channel
message OpenChannelRequest {

  // The hex-encoded public key of the node to open a channel with.
  string node_pubkey = 1;

  // An address which can be used to connect to a remote peer.
  // It can be of type IPv4:port, IPv6:port, OnionV3:port or hostname:port
  string address = 2;

  // The amount of satoshis the caller is willing to commit to the channel.
  uint64 channel_amount_sats = 3;

  // The amount of satoshis to push to the remote side as part of the initial commitment state.
  optional uint64 push_to_counterparty_msat = 4;

  // The channel configuration to be used for opening this channel. If unset, default ChannelConfig is used.
  optional ChannelConfig channel_config = 5;

  // Whether the channel should be public.
  bool announce_channel = 6;
}

message OpenChannelResponse {

  // The channel id of the created channel that user can use to refer to channel.
  bytes user_channel_id = 1;
}

// ChannelConfig represents the configuration settings for a channel in a Lightning Network node.
// See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html
message ChannelConfig {
  // Amount (in millionths of a satoshi) charged per satoshi for payments forwarded outbound
  // over the channel.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.forwarding_fee_proportional_millionths
  uint32 forwarding_fee_proportional_millionths = 1;

  // Amount (in milli-satoshi) charged for payments forwarded outbound over the channel,
  // in excess of forwarding_fee_proportional_millionths.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.forwarding_fee_base_msat
  uint32 forwarding_fee_base_msat = 2;

  // The difference in the CLTV value between incoming HTLCs and an outbound HTLC forwarded
  // over the channel this config applies to.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.cltv_expiry_delta
  uint32 cltv_expiry_delta = 3;

  // The maximum additional fee we’re willing to pay to avoid waiting for the counterparty’s
  // to_self_delay to reclaim funds.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.force_close_avoidance_max_fee_satoshis
  uint64 force_close_avoidance_max_fee_satoshis = 4;

  // If set, allows this channel’s counterparty to skim an additional fee off this node’s
  // inbound HTLCs. Useful for liquidity providers to offload on-chain channel costs to end users.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.accept_underpaying_htlcs
  bool accept_underpaying_htlcs = 5;

  // Limit our total exposure to potential loss to on-chain fees on close, including
  // in-flight HTLCs which are burned to fees as they are too small to claim on-chain
  // and fees on commitment transaction(s) broadcasted by our counterparty in excess of
  // our own fee estimate.
  // See more: https://docs.rs/lightning/latest/lightning/util/config/struct.ChannelConfig.html#structfield.max_dust_htlc_exposure
  oneof max_dust_htlc_exposure {

    // This sets a fixed limit on the total dust exposure in millisatoshis.
    // See more: https://docs.rs/lightning/latest/lightning/util/config/enum.MaxDustHTLCExposure.html#variant.FixedLimitMsat
    uint64 fixed_limit_msat = 6;

    // This sets a multiplier on the ConfirmationTarget::OnChainSweep feerate (in sats/KW) to determine the maximum allowed dust exposure.
    // See more: https://docs.rs/lightning/latest/lightning/util/config/enum.MaxDustHTLCExposure.html#variant.FeeRateMultiplier
    uint64 fee_rate_multiplier = 7;
  }
}
